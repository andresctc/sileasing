BROKER SCHEMA mqsi
--  Generated by com.ibm.etools.mft.pattern.mbi.mrrc.synchmq Version 1.0
--  $MQSI patternName=com.ibm.etools.mft.pattern.mbi.mrrc.synchmq MQSI$
--  $MQSI patternVersion=1.0 MQSI$

CREATE Compute MODULE CreateLogMessage

CREATE FUNCTION main() RETURNS BOOLEAN BEGIN
	
-- Create logging info in MQRFH2 - add to existing message
	
	DECLARE MsgIdLog CHARACTER;	
	
	SET OutputRoot = InputRoot;
	
	DECLARE outRef REFERENCE TO OutputRoot.MQRFH2;
	
	IF Environment.Variables.RRMode = 'Response' THEN			
		SET MsgIdLog = InputRoot.MQMD.CorrelId;	
	ELSE						
		SET MsgIdLog = InputRoot.MQMD.MsgId;
	END IF;
	
	
	IF LASTMOVE(outRef) THEN
-- 		MQRFH2 EXISTS
	   SET outRef.usr.BrokerName = SQL.BrokerName;
	   SET outRef.usr.MessageFlowLabel = SQL.MessageFlowLabel; 
	   SET outRef.usr.DTSTAMP =   CURRENT_TIMESTAMP; 		
	   SET outRef.usr.Opcion = Environment.Variables.RRMode;
	   SET outRef.usr.MsgIdLog = MsgIdLog;
	   
  
	ELSE
-- 	 CREATE THE MQRFH2 Header first
	 DECLARE MQMDRef REFERENCE TO OutputRoot.MQMD;	
	 CREATE NEXTSIBLING OF MQMDRef AS outRef DOMAIN('MQRFH2') NAME 'MQRFH2';
	 SET outRef.(MQRFH2.Field)Version = 2;
	 SET outRef.(MQRFH2.Field)Encoding = InputRoot.MQMD.Encoding;
	 SET outRef.(MQRFH2.Field)CodedCharSetId = InputRoot.MQMD.CodedCharSetId;
	 SET outRef.usr.BrokerName = SQL.BrokerName;
	 SET outRef.usr.MessageFlowLabel = SQL.MessageFlowLabel; 
	 SET outRef.usr.DTSTAMP =   CURRENT_TIMESTAMP;
	 SET outRef.usr.Opcion = Environment.Variables.RRMode;
	 SET outRef.usr.MsgIdLog = MsgIdLog;  
	 SET OutputRoot.MQMD.Format = MQFMT_RF_HEADER_2;
	END IF;

END;
END MODULE;

CREATE Compute MODULE CreateTraceData
CREATE FUNCTION main() RETURNS BOOLEAN BEGIN
	DECLARE EnvVarRef REFERENCE TO Environment.Variables;
	SET EnvVarRef.DTSTAMP = CURRENT_TIMESTAMP; 
	SET EnvVarRef.BrokerName = Substring(SQL.BrokerName from 1 for 128);
    SET EnvVarRef.MessageFlowlabel = Substring(SQL.MessageFlowLabel from 1 for 128);
    
END;
END MODULE;
CREATE FILTER MODULE CheckLogging
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	DECLARE Text CHARACTER;	
    
    SET Text = LocalEnvironment.Variables.log;
    
    
    IF Text = NULL THEN  
    	RETURN FALSE;
    ELSE   	
    	IF Text = 'true' THEN 
    		RETURN TRUE;
    	ELSE
    		RETURN FALSE;	
    	END IF;        
    END IF;
    
	IF Environment.Variables.ResponseLoggingOn AND (Environment.Variables.RRMode = 'Response') THEN RETURN TRUE;
		END IF;
	IF Environment.Variables.RequestLoggingOn AND (Environment.Variables.RRMode = 'Request') THEN RETURN TRUE;
		END IF;
		RETURN FALSE;
	END;

END MODULE;

CREATE COMPUTE MODULE WriteFiles_Prepare_Msg
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;	
	
END MODULE;

CREATE COMPUTE MODULE WriteFiles	
	
	CREATE FUNCTION main() RETURNS BOOLEAN BEGIN
	Declare Text CHARACTER;
	SET OutputRoot = InputRoot;
	
	DECLARE CR CHAR CAST(CAST('X''0A''' AS BLOB) AS CHAR CCSID InputRoot.Properties.CodedCharSetId); 
	DECLARE LF CHAR CAST(CAST('X''0D''' AS BLOB) AS CHAR CCSID InputRoot.Properties.CodedCharSetId); 
	DECLARE empty CHAR CAST(CAST('X''00''' AS BLOB) AS CHAR CCSID InputRoot.Properties.CodedCharSetId); 
		
	DECLARE outRef REFERENCE TO OutputRoot.MQRFH2;
	
	SET Text = FIELDNAME(InputBody);
	
	IF Text='XMLNSC' THEN
		DECLARE wholeMsgBlob BLOB ASBITSTREAM(InputRoot.XMLNSC,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId );						
		DECLARE wholeMsgChar CHARACTER CAST(wholeMsgBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);				 
		DECLARE newBlob BLOB CAST(REPLACE(wholeMsgChar, CR, empty) AS BLOB CCSID InputRoot.Properties.CodedCharSetId);		
		SET OutputRoot.BLOB.BLOB = newBlob;		
	ELSE
		DECLARE wholeMsgChar CHARACTER CAST(InputRoot.BLOB.BLOB AS CHARACTER CCSID 819);
		DECLARE newBlob BLOB CAST(REPLACE(wholeMsgChar, CR, empty) AS BLOB CCSID InputRoot.Properties.CodedCharSetId);
		SET OutputRoot.BLOB.BLOB = newBlob;
	END IF;
	
END;
END MODULE;	

